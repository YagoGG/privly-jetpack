/**
 * @fileOverview This file provides the posting functionality, i.e, posting new links 
 * generated by the extension to a host page.
 *
 * Posting Process:
 *
 * 1. The user selects an editable element with a right click.
 * 2. The user clicks a Privly posting application in the resultant context
 *    menu.
 * 3. This script records the target node ID and the host page the link will be posted to.
 * 4. The script opens a posting window and records its ID.
 * 5. The posting application will complete and send this script a message with the Privly URL.
 * 6. On receiving the Privly URL, the script can post the link in the host page via two
 *    ways depending on whether the target node exists in an iframe.
 * 6a. When the node exists in an iframe --
 *    1) Content scripts(iframe.js) already injected are sent a message or the Privly URL to post.
 *    2) The scripts decide whether the Privly link is meant to be posted in the page.
 * 6b. When the node doesn't exist in an iframe --
 *    1) A Content script(post_link.js) is then injected into the known host page tab passing 
 *       the URL and target node ID as a content script option. The content script finally posts the
         privly link in the specified DOM node.
 *
 */

/* global data, tabs */
const { data } = require("sdk/self");
var tabs = require("sdk/tabs");
// Local storage shim
var { ls } = require("./local_storage.js");

/**
 * @namespace Functionality for posting new links to pages.
 */
var postingProcess = {

  /**
   * This secret is sent from privly-applications and is included in every 
   * message to the application.
   */
  messageSecret: "",

  /**
   * Flag to determine a pending post.
   */
  pendingPost: false,

  /**
   * Tab that contains the host page.
   */
  postingResultTab: null,
 
  /**
   * Tab that contains the privly application.
   */
  postingApplicationTab: null,

  /**
   * Selection text when the context menu was clicked.
   * This text is the initial privly application content.
   */
  postingApplicationStartingValue: "",

  /** 
   * Target DOM node that the user context-clicked to invoke the menu. 
   * Privly link will be posted in this node.
   */
  targetNodeId: "",

  /**
   * Flag to determine if the target node is part of an iframe.
   * Final step of the posting process will change slightly.
   */
  iframe: false,

  /**
   * Content Script instances/workers/messaging API objects.
   */
  workers: [],

  /**
   * Host Page URL.
   */
  pageURL: "",
 
  /**
   * Defines the Context menu. This is called from "extension.js".
   * 
   * @param {Object} popupButton Privly popup button(defined in privly_ui.js)
   */
  menuSetup: function(popupButton) {

    var cm = require("sdk/context-menu");

    cm.Item({
      label: "New Message",
      context: cm.PredicateContext(function(context) {
        // Show message option for content editable DOM nodes.
        return context.isEditable;
      }),
      contentScriptFile: [data.url("./content_scripts/posting_process/sendkeys.js"),
                          data.url("./content_scripts/posting_process/context_menu.js")],
      onMessage: function(message) {
        postingProcess.postingHandler(message, tabs.activeTab, "Message");
      },
    });

    // This allows posting Privly links in an iframe node. The link will be sent to the 
    // content script injected into the iframe.
    // Also injects the script that shows the posting button.
    require("sdk/page-mod").PageMod({
      include: "*",
      contentScriptFile: [data.url("./content_scripts/posting_process/sendkeys.js"),
                          data.url("./content_scripts/posting_process/iframe.js"),
                          data.url("./content_scripts/posting_process/posting_button.js")],
      onAttach: function(worker) {
        worker.on("detach", function() {
          var idx = postingProcess.workers.indexOf(worker);
          if (idx !== -1) {
            postingProcess.workers.splice(idx, 1);
          }
        });
        postingProcess.workers.push(worker);
        worker.port.on("postStatus", postingProcess.postStatusHandler);
        worker.port.on("requestBtnStatus", function(message) {
          postingProcess.sendBtnStatus(message, worker);
        });
        worker.port.on("privlyButtonClicked", postingProcess.postingHandler);
      },
    });

    // This allows communication between the extension and privly applications.
    // Messages sent by privly application will be read by the content script and will then be 
    // forwarded to the extension.
    require("sdk/page-mod").PageMod({
      include: "chrome://privly/content/privly-applications/Message/new.html",
      contentScriptFile: data.url("./content_scripts/posting_process/privly_app.js"),
      contentScriptWhen: "start",
      onAttach: function(worker) {
        worker.port.on("messageSecret", postingProcess.saveSecret);
        worker.port.on("requestInitialContent", function(message) {
          postingProcess.sendInitialContent(message, worker);
        });
        worker.port.on("setPrivlyURL", postingProcess.receivePrivlyURL);
      },
    });

    // User is notified of a --
    // 1) Pending Post.
    // 2) Error
    // Popups/panels are used to display the message.
    
    // Pending Post popup
    postingProcess.pendingNotification = require("sdk/panel").Panel({
      contentURL: data.url("./pages/pending.html"),
      contentScript: postingProcess.notificationScript("pendingPost"),
      position: popupButton,
      height: 100,
    });

    postingProcess.pendingNotification.port.on("click", postingProcess.hideNotification);

    // Error Popup
    postingProcess.errorNotification = require("sdk/panel").Panel({
      contentURL: data.url("./pages/posting_error.html"),
      contentScript: postingProcess.notificationScript("error"),
      position: popupButton,
      height: 130,
    });

    postingProcess.errorNotification.port.on("click", postingProcess.hideNotification);
  },

  /**
   * Returns the Notification Content Script. The script is used to detect "click" events on the 
   * popup
   *
   * @param {String} type Notification type - whether it notifies the user about a "pending post" 
   *                      or an "error".
   *
   * @return {String} Content Script
   */
  notificationScript: function(type) {
    return "window.addEventListener('click', function(event) { " +
           "  self.port.emit('click', '" + type + "');" +
           "}, false);"
  },

  /**
   * Handles messages from the notification content script. On "click", the notification 
   * panel/popup sends a message to the extension, which then hides the popup.
   *
   * @param {String} message Message
   */
  hideNotification: function(message) {
    if (message === "error") {
      postingProcess.errorNotification.hide();
    }
    if (message === "pendingPost") {
      postingProcess.pendingNotification.hide();
    }
  },

  /**
   * Sends the Privly button status to the content script.
   * Called on receipt of "requestBtnStatus".
   *
   * @param {String} message Message sent by the content script.
   * @param {Object} worker Jetpack messaging API object. Content Script instance.
   */
  sendBtnStatus: function(message, worker) {
    var btnStatus;
    if (ls.getItem("Options:DissableButton") === true) {
      btnStatus = "checked";
    } else {
      btnStatus = "unchecked";
    }
    worker.port.emit("privlyBtnStatus", btnStatus);
  },

  /**
   * Saves the message secret sent by the privly-application. This secret will be included in all
   * messages exchanged between the extension and the application.
   * Called on receipt of "messageSecret".
   *
   * @param {String} message Message sent by the content script. This message contains the message
   *                         secret
   */
  saveSecret: function(message) {
    postingProcess.messageSecret = message;
  },

  /**
   * Sends the initial content to the privly-application.
   * Called on receipt of "requestInitialContent"
   *
   * @param {String} message Message sent by the content script.
   * @param {Object} worker Jetpack messaging API object.
   */
  sendInitialContent: function(message, worker) {
    worker.port.emit("initialContent", {
      secret: postingProcess.messageSecret,
      initialContent: postingProcess.postingApplicationStartingValue,
    });
  },

  /**
   * Handles the receipt of Privly URLs from the posting application
   * for addition to the host page.
   *
   * @param {string} url Privly URL 
   */
  receivePrivlyURL: function(url) {

    if (postingProcess.postingResultTab !== null) {

      var resultTab = postingProcess.postingResultTab;

      //Switches to the result tab
      resultTab.activate();

      if (!postingProcess.iframe) {
        // post URL in the resultTab page.
        var worker = resultTab.attach({
          contentScriptFile: [data.url("./content_scripts/posting_process/sendkeys.js"),
                              data.url("./content_scripts/posting_process/post_link.js")],
          contentScriptOptions: {
            privlyURL: url,
            nodeId: postingProcess.targetNodeId,
          },
        });
        worker.port.on("postStatus", postingProcess.postStatusHandler);
        worker.port.on("removeScript", function(message) {
          postingProcess.destroyWorker(message, worker);
        });
      } else {
        var message = {
          privlyURL: url,
          pageURL: postingProcess.pageURL,
          nodeId: postingProcess.targetNodeId,
        }
        // the target node is part of an iframe. Send the privly URL to all 
        // content script instances. The content script will decide whether the
        // privly link needs to be posted depending on the pageURL.
        for (var i=0 ; i<postingProcess.workers.length ; i++) {
          postingProcess.workers[i].port.emit("postURL", message);
        }
      }
      postingProcess.pendingPost = false;

      //remove the record of where we are posting to
      postingProcess.postingResultTab = null;
    }
  },

  /**
   * Destroys the content script instance/worker. Called on receipt of "removeScript".
   *
   * @param {String} message Message sent by the content script.
   * @param {Object} worker Jetpack messaging API object.
   */
  destroyWorker: function(message, worker) {
    // No longer need this worker.
    worker.destroy();
  },

  /**
   * Called when the privly link is posted in the host page.
   * 
   * @param {Object} message Message sent by content scripts indicating a 
   *                         successful or failed post.
   */
  postStatusHandler: function(message) {
    if (message === "success") {
      // Close the privly application window/tab on a successful post.
      postingProcess.postingApplicationTab.close();
    } else if (message === "failure") {
      // Notify the user of an error.
      postingProcess.errorNotification.show();
    }
    postingProcess.postingApplicationTab = null;
  },

  /**
   * Handles click events on the context menu item.
   * 
   * @param {Object} info Message sent from context menu script.
   */
  postingHandler: function(info) {

    var sourceTab = tabs.activeTab;
    var postingApplicationName = "Message";

    if (postingProcess.pendingPost === false) {

      if (sourceTab.url !== info.pageURL) {
        // target node present in an iframe.
        postingProcess.iframe = true;
        postingProcess.pageURL = info.pageURL;
      } else {
        postingProcess.iframe = false;
      }

      postingProcess.pendingPost = true;
      postingProcess.targetNodeId = info.nodeId;

      var postingDomain = ls.getItem("posting_content_server_url");
      if ( postingDomain === undefined ) {
        postingDomain = "https://privlyalpha.org";
        ls.setItem("posting_content_server_url", postingDomain);
      }
      
      var postingApplicationUrl = "chrome://privly/content/privly-applications/" +
                                  postingApplicationName + "/new.html";
      postingProcess.postingApplicationStartingValue = info.text;
     
      postingProcess.postingResultTab = sourceTab;

      // Open the application in a new window
      tabs.open({
        url: postingApplicationUrl,
        inNewWindow: true,
        onOpen: function(tab) {
          postingProcess.postingApplicationTab = tab;
          postingProcess.postingApplicationTab.on("close", function(tab) {
            postingProcess.tabClosed(tab, "postingApplication");
          });
        },
      }); 
    
      postingProcess.postingResultTab.on("close", function(tab) { 
        postingProcess.tabClosed(tab, "resultTab");
      });
    } else {
      // Notify the user of a pending post.
      postingProcess.pendingNotification.show();
    }
  },

  /**
   * Handles closure of the Host page tab or Privly application tab.
   * 
   * @param {Object} tab Host page tab or Privly Application tab.
   * @param {string} type "resultTab" or "postingApplication".
   */
  tabClosed: function(tab, type) {

    if (postingProcess.postingApplicationTab === null ||
        postingProcess.postingResultTab === null) {
      return;
    }

    // The tab receiving the URL is closed.
    if (type === "resultTab") {
      postingProcess.postingApplicationTab.close();
    }
    postingProcess.pendingPost = false;

    postingProcess.postingResultTab = null;
    postingProcess.postingApplicationTab = null;
    postingProcess.postingApplicationStartingValue = "";
  },
};

exports.postingProcess = postingProcess;
